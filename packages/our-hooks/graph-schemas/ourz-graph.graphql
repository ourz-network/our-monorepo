directive @entity on OBJECT

directive @derivedFrom(field: String) on FIELD_DEFINITION

directive @subgraphId(id: String) on OBJECT

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ERC20Transfer {
  """<txHash>-<proxyAddress>"""
  id: ID!

  """The address of the Split transferring the ERC20s"""
  split: Split!

  """The transaction hash of the transfer"""
  transactionHash: String!

  """The address of the ERC20 Contract"""
  contract: String!

  """The amount of ERC20s Transferred"""
  amount: BigInt!
}

input ERC20Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  split: String
  split_not: String
  split_gt: String
  split_lt: String
  split_gte: String
  split_lte: String
  split_in: [String!]
  split_not_in: [String!]
  split_contains: String
  split_not_contains: String
  split_starts_with: String
  split_not_starts_with: String
  split_ends_with: String
  split_not_ends_with: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_not_contains: String
  transactionHash_starts_with: String
  transactionHash_not_starts_with: String
  transactionHash_ends_with: String
  transactionHash_not_ends_with: String
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_not_contains: String
  contract_starts_with: String
  contract_not_starts_with: String
  contract_ends_with: String
  contract_not_ends_with: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
}

enum ERC20Transfer_orderBy {
  id
  split
  transactionHash
  contract
  amount
}

enum OrderDirection {
  asc
  desc
}

type Query {
  splitZNFT(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SplitZNFT
  splitZNFTs(
    skip: Int = 0
    first: Int = 100
    orderBy: SplitZNFT_orderBy
    orderDirection: OrderDirection
    where: SplitZNFT_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SplitZNFT!]!
  splitEdition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SplitEdition
  splitEditions(
    skip: Int = 0
    first: Int = 100
    orderBy: SplitEdition_orderBy
    orderDirection: OrderDirection
    where: SplitEdition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SplitEdition!]!
  erc20Transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC20Transfer
  erc20Transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ERC20Transfer_orderBy
    orderDirection: OrderDirection
    where: ERC20Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ERC20Transfer!]!
  split(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Split
  splits(
    skip: Int = 0
    first: Int = 100
    orderBy: Split_orderBy
    orderDirection: OrderDirection
    where: Split_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Split!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  recipient(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Recipient
  recipients(
    skip: Int = 0
    first: Int = 100
    orderBy: Recipient_orderBy
    orderDirection: OrderDirection
    where: Recipient_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Recipient!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Recipient {
  """`${proxyAddress}-${userAddress}`"""
  id: ID!

  """User Entity"""
  user: User!

  """Split Entity"""
  split: Split!

  """Name/Alias of User"""
  name: String!

  """Role in Split"""
  role: String!

  """Number between 0-100 as a string"""
  shares: String!

  """Shares * 1,000,000 as a string"""
  allocation: String!

  """ETH available to claim for the specific user"""
  claimableETH: BigInt!

  """Total amount of ETH claimed from this Split"""
  claimedETH: BigInt!
}

input Recipient_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_not_contains: String
  user_starts_with: String
  user_not_starts_with: String
  user_ends_with: String
  user_not_ends_with: String
  split: String
  split_not: String
  split_gt: String
  split_lt: String
  split_gte: String
  split_lte: String
  split_in: [String!]
  split_not_in: [String!]
  split_contains: String
  split_not_contains: String
  split_starts_with: String
  split_not_starts_with: String
  split_ends_with: String
  split_not_ends_with: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: String
  role_not: String
  role_gt: String
  role_lt: String
  role_gte: String
  role_lte: String
  role_in: [String!]
  role_not_in: [String!]
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  shares: String
  shares_not: String
  shares_gt: String
  shares_lt: String
  shares_gte: String
  shares_lte: String
  shares_in: [String!]
  shares_not_in: [String!]
  shares_contains: String
  shares_not_contains: String
  shares_starts_with: String
  shares_not_starts_with: String
  shares_ends_with: String
  shares_not_ends_with: String
  allocation: String
  allocation_not: String
  allocation_gt: String
  allocation_lt: String
  allocation_gte: String
  allocation_lte: String
  allocation_in: [String!]
  allocation_not_in: [String!]
  allocation_contains: String
  allocation_not_contains: String
  allocation_starts_with: String
  allocation_not_starts_with: String
  allocation_ends_with: String
  allocation_not_ends_with: String
  claimableETH: BigInt
  claimableETH_not: BigInt
  claimableETH_gt: BigInt
  claimableETH_lt: BigInt
  claimableETH_gte: BigInt
  claimableETH_lte: BigInt
  claimableETH_in: [BigInt!]
  claimableETH_not_in: [BigInt!]
  claimedETH: BigInt
  claimedETH_not: BigInt
  claimedETH_gt: BigInt
  claimedETH_lt: BigInt
  claimedETH_gte: BigInt
  claimedETH_lte: BigInt
  claimedETH_in: [BigInt!]
  claimedETH_not_in: [BigInt!]
}

enum Recipient_orderBy {
  id
  user
  split
  name
  role
  shares
  allocation
  claimableETH
  claimedETH
}

type Split {
  """The address of the Proxy"""
  id: ID!

  """A nickname for the Proxy"""
  nickname: String!

  """The transaction hash the Proxy was created at"""
  transactionHash: String!

  """The timestamp of the block the Ask was created in"""
  createdAtTimestamp: BigInt!

  """The number of the block the Ask created in"""
  createdAtBlockNumber: BigInt!

  """The current owner(s) of the Proxy"""
  owners(skip: Int = 0, first: Int = 100, orderBy: User_orderBy, orderDirection: OrderDirection, where: User_filter): [User!]!

  """The original owner of the Proxy"""
  creator: User!

  """
  The amount of ETH/WETH currently available to claim by Split Recipients
  """
  ETH: BigInt!

  """Recipients should increment window before claiming"""
  needsIncremented: Boolean!

  """Array of the Split's Recipients"""
  recipients(skip: Int = 0, first: Int = 100, orderBy: Recipient_orderBy, orderDirection: OrderDirection, where: Recipient_filter): [Recipient!]!

  """The ERC721(s) the Proxy created"""
  creations(skip: Int = 0, first: Int = 100, orderBy: SplitZNFT_orderBy, orderDirection: OrderDirection, where: SplitZNFT_filter): [SplitZNFT!]!

  """The Zora NFT-Edition(s) the Proxy created"""
  editions(skip: Int = 0, first: Int = 100, orderBy: SplitEdition_orderBy, orderDirection: OrderDirection, where: SplitEdition_filter): [SplitEdition!]!

  """The ERC20 Transfers that the Proxy has successfully distributed"""
  ERC20Transfers(skip: Int = 0, first: Int = 100, orderBy: ERC20Transfer_orderBy, orderDirection: OrderDirection, where: ERC20Transfer_filter): [ERC20Transfer!]!
}

input Split_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nickname: String
  nickname_not: String
  nickname_gt: String
  nickname_lt: String
  nickname_gte: String
  nickname_lte: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_not_contains: String
  transactionHash_starts_with: String
  transactionHash_not_starts_with: String
  transactionHash_ends_with: String
  transactionHash_not_ends_with: String
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  owners: [String!]
  owners_not: [String!]
  owners_contains: [String!]
  owners_not_contains: [String!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_not_contains: String
  creator_starts_with: String
  creator_not_starts_with: String
  creator_ends_with: String
  creator_not_ends_with: String
  ETH: BigInt
  ETH_not: BigInt
  ETH_gt: BigInt
  ETH_lt: BigInt
  ETH_gte: BigInt
  ETH_lte: BigInt
  ETH_in: [BigInt!]
  ETH_not_in: [BigInt!]
  needsIncremented: Boolean
  needsIncremented_not: Boolean
  needsIncremented_in: [Boolean!]
  needsIncremented_not_in: [Boolean!]
  recipients: [String!]
  recipients_not: [String!]
  recipients_contains: [String!]
  recipients_not_contains: [String!]
}

enum Split_orderBy {
  id
  nickname
  transactionHash
  createdAtTimestamp
  createdAtBlockNumber
  owners
  creator
  ETH
  needsIncremented
  recipients
  creations
  editions
  ERC20Transfers
}

type SplitEdition {
  """The address of the Zora NFT-Editions contract"""
  id: ID!

  """The creator of the Edition Contract"""
  creator: Split!

  """The title of the Edition contract"""
  name: String!

  """Symbol of the Edition contract"""
  symbol: String!

  """Metadata: Description of the Edition entry"""
  description: String!

  """Metadata: Animation url (optional) of the Edition entry"""
  animationUrl: String!

  """Metadata: Image url (semi-required) of the Edition entry"""
  imageUrl: String!

  """Total size of the Edition (number of possible editions)"""
  editionSize: BigInt!

  """BPS amount of royalty"""
  royaltyBPS: BigInt!
}

input SplitEdition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_not_contains: String
  creator_starts_with: String
  creator_not_starts_with: String
  creator_ends_with: String
  creator_not_ends_with: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  animationUrl: String
  animationUrl_not: String
  animationUrl_gt: String
  animationUrl_lt: String
  animationUrl_gte: String
  animationUrl_lte: String
  animationUrl_in: [String!]
  animationUrl_not_in: [String!]
  animationUrl_contains: String
  animationUrl_not_contains: String
  animationUrl_starts_with: String
  animationUrl_not_starts_with: String
  animationUrl_ends_with: String
  animationUrl_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_gt: String
  imageUrl_lt: String
  imageUrl_gte: String
  imageUrl_lte: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  editionSize: BigInt
  editionSize_not: BigInt
  editionSize_gt: BigInt
  editionSize_lt: BigInt
  editionSize_gte: BigInt
  editionSize_lte: BigInt
  editionSize_in: [BigInt!]
  editionSize_not_in: [BigInt!]
  royaltyBPS: BigInt
  royaltyBPS_not: BigInt
  royaltyBPS_gt: BigInt
  royaltyBPS_lt: BigInt
  royaltyBPS_gte: BigInt
  royaltyBPS_lte: BigInt
  royaltyBPS_in: [BigInt!]
  royaltyBPS_not_in: [BigInt!]
}

enum SplitEdition_orderBy {
  id
  creator
  name
  symbol
  description
  animationUrl
  imageUrl
  editionSize
  royaltyBPS
}

type SplitZNFT {
  """The tokenId of the Zora Media ERC-721"""
  id: ID!

  """The creator of the ERC-721"""
  creator: Split!

  """
  The transaction hash the ERC-721 was originally logged in this subgraph
  """
  transactionHash: String!
}

input SplitZNFT_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_not_contains: String
  creator_starts_with: String
  creator_not_starts_with: String
  creator_ends_with: String
  creator_not_ends_with: String
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_not_contains: String
  transactionHash_starts_with: String
  transactionHash_not_starts_with: String
  transactionHash_ends_with: String
  transactionHash_not_ends_with: String
}

enum SplitZNFT_orderBy {
  id
  creator
  transactionHash
}

type Subscription {
  splitZNFT(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SplitZNFT
  splitZNFTs(
    skip: Int = 0
    first: Int = 100
    orderBy: SplitZNFT_orderBy
    orderDirection: OrderDirection
    where: SplitZNFT_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SplitZNFT!]!
  splitEdition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SplitEdition
  splitEditions(
    skip: Int = 0
    first: Int = 100
    orderBy: SplitEdition_orderBy
    orderDirection: OrderDirection
    where: SplitEdition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SplitEdition!]!
  erc20Transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC20Transfer
  erc20Transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ERC20Transfer_orderBy
    orderDirection: OrderDirection
    where: ERC20Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ERC20Transfer!]!
  split(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Split
  splits(
    skip: Int = 0
    first: Int = 100
    orderBy: Split_orderBy
    orderDirection: OrderDirection
    where: Split_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Split!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  recipient(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Recipient
  recipients(
    skip: Int = 0
    first: Int = 100
    orderBy: Recipient_orderBy
    orderDirection: OrderDirection
    where: Recipient_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Recipient!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type User {
  """Ethereum Address"""
  id: ID!

  """Total amount of ETH claimed from all Splits"""
  claimedETH: BigInt!

  """Proxies that this address owns"""
  ownedSplits(skip: Int = 0, first: Int = 100, orderBy: Split_orderBy, orderDirection: OrderDirection, where: Split_filter): [Split!]!

  """Proxies that this address created"""
  createdSplits(skip: Int = 0, first: Int = 100, orderBy: Split_orderBy, orderDirection: OrderDirection, where: Split_filter): [Split!]!

  """Splits that this address is a recipient of"""
  recipientInfo(skip: Int = 0, first: Int = 100, orderBy: Recipient_orderBy, orderDirection: OrderDirection, where: Recipient_filter): [Recipient!]!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  claimedETH: BigInt
  claimedETH_not: BigInt
  claimedETH_gt: BigInt
  claimedETH_lt: BigInt
  claimedETH_gte: BigInt
  claimedETH_lte: BigInt
  claimedETH_in: [BigInt!]
  claimedETH_not_in: [BigInt!]
}

enum User_orderBy {
  id
  claimedETH
  ownedSplits
  createdSplits
  recipientInfo
}

