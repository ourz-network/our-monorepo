// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFTContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTContract", id.toString(), this);
  }

  static load(id: string): NFTContract | null {
    return store.get("NFTContract", id) as NFTContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class ERC721 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC721 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC721 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC721", id.toString(), this);
  }

  static load(id: string): ERC721 | null {
    return store.get("ERC721", id) as ERC721 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class OurProxy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OurProxy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OurProxy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OurProxy", id.toString(), this);
  }

  static load(id: string): OurProxy | null {
    return store.get("OurProxy", id) as OurProxy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get splitRecipients(): string {
    let value = this.get("splitRecipients");
    return value.toString();
  }

  set splitRecipients(value: string) {
    this.set("splitRecipients", Value.fromString(value));
  }

  get ETH(): BigInt {
    let value = this.get("ETH");
    return value.toBigInt();
  }

  set ETH(value: BigInt) {
    this.set("ETH", Value.fromBigInt(value));
  }

  get creations(): Array<string> {
    let value = this.get("creations");
    return value.toStringArray();
  }

  set creations(value: Array<string>) {
    this.set("creations", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownedProxies(): Array<string> {
    let value = this.get("ownedProxies");
    return value.toStringArray();
  }

  set ownedProxies(value: Array<string>) {
    this.set("ownedProxies", Value.fromStringArray(value));
  }

  get createdProxies(): Array<string> {
    let value = this.get("createdProxies");
    return value.toStringArray();
  }

  set createdProxies(value: Array<string>) {
    this.set("createdProxies", Value.fromStringArray(value));
  }

  get ethClaimed(): BigInt | null {
    let value = this.get("ethClaimed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethClaimed(value: BigInt | null) {
    if (value === null) {
      this.unset("ethClaimed");
    } else {
      this.set("ethClaimed", Value.fromBigInt(value as BigInt));
    }
  }
}
