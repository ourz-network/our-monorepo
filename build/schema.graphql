type NFTContract @entity {
    "The Contract Address"
    id: ID!

    splitNFTs: [SplitNFT!]! @derivedFrom(field: "contract")
}

type SplitNFT @entity {
    # ex: first Zora NFT = '0-0x7c2668bd0d3c050703cecc956c11bd520c26f7d4'
    "<tokenId>-<contractAddress>"
    id: ID!

    "The tokenId of the ERC-721"
    tokenId: String!

    "The ERC-721 contract's address"
    contract: NFTContract!

    "The creator of the ERC-721"
    creator: OurProxy!

    "The transaction hash the ERC-721 was originally logged in this subgraph"
    transactionHash: String!
}

type OurProxy @entity {
    "The address of the Proxy"
    id: ID!

    "The transaction hash the Proxy was created at"
    transactionHash: String!

    "The timestamp of the block the Ask was created in"
    createdAtTimestamp: BigInt!

    "The number of the block the Ask created in"
    createdAtBlockNumber: BigInt!

    "The current owner of the Proxy"
    proxyOwners: [User!]

    "The original owner of the Proxy"
    creator: User!

    "The number of times ownership has been transferred"
    transfers: BigInt!

    "The Split Recipients and their allocations; JSON.stringify()'d"
    splitRecipients: String!

    "The amount of ETH/WETH available to claim by Split Recipients"
    ETH: BigInt!

    "The ERC721(s) the Proxy created"
    creations: [SplitNFT!]! @derivedFrom(field: "creator")
}

type User @entity {
    "Ethereum Address"
    id: ID!

    "Proxies that this address owns"
    ownedProxies: [OurProxy!]! @derivedFrom(field: "proxyOwners")

    "Proxies that this address created"
    createdProxies: [OurProxy!]! @derivedFrom(field: "creator")

    "Total amount of ETH claimed"
    ethClaimed: BigInt!
}
