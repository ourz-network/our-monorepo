// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SplitZNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromString(""));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitZNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SplitZNFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SplitZNFT", id.toString(), this);
    }
  }

  static load(id: string): SplitZNFT | null {
    return changetype<SplitZNFT | null>(store.get("SplitZNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class SplitEdition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("animationUrl", Value.fromString(""));
    this.set("imageUrl", Value.fromString(""));
    this.set("editionSize", Value.fromBigInt(BigInt.zero()));
    this.set("royaltyBPS", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitEdition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SplitEdition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SplitEdition", id.toString(), this);
    }
  }

  static load(id: string): SplitEdition | null {
    return changetype<SplitEdition | null>(store.get("SplitEdition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get animationUrl(): string {
    let value = this.get("animationUrl");
    return value!.toString();
  }

  set animationUrl(value: string) {
    this.set("animationUrl", Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value!.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }

  get editionSize(): BigInt {
    let value = this.get("editionSize");
    return value!.toBigInt();
  }

  set editionSize(value: BigInt) {
    this.set("editionSize", Value.fromBigInt(value));
  }

  get royaltyBPS(): BigInt {
    let value = this.get("royaltyBPS");
    return value!.toBigInt();
  }

  set royaltyBPS(value: BigInt) {
    this.set("royaltyBPS", Value.fromBigInt(value));
  }
}

export class ERC20Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("splitProxy", Value.fromString(""));
    this.set("transactionHash", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ERC20Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ERC20Transfer", id.toString(), this);
    }
  }

  static load(id: string): ERC20Transfer | null {
    return changetype<ERC20Transfer | null>(store.get("ERC20Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get splitProxy(): string {
    let value = this.get("splitProxy");
    return value!.toString();
  }

  set splitProxy(value: string) {
    this.set("splitProxy", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class OurProxy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nickname", Value.fromString(""));
    this.set("transactionHash", Value.fromString(""));
    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdAtBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("proxyOwners", Value.fromStringArray(new Array(0)));
    this.set("creator", Value.fromString(""));
    this.set("transfers", Value.fromBigInt(BigInt.zero()));
    this.set("ETH", Value.fromBigInt(BigInt.zero()));
    this.set("needsIncremented", Value.fromBoolean(false));
    this.set("splitRecipients", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OurProxy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OurProxy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OurProxy", id.toString(), this);
    }
  }

  static load(id: string): OurProxy | null {
    return changetype<OurProxy | null>(store.get("OurProxy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nickname(): string {
    let value = this.get("nickname");
    return value!.toString();
  }

  set nickname(value: string) {
    this.set("nickname", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get proxyOwners(): Array<string> {
    let value = this.get("proxyOwners");
    return value!.toStringArray();
  }

  set proxyOwners(value: Array<string>) {
    this.set("proxyOwners", Value.fromStringArray(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get transfers(): BigInt {
    let value = this.get("transfers");
    return value!.toBigInt();
  }

  set transfers(value: BigInt) {
    this.set("transfers", Value.fromBigInt(value));
  }

  get ETH(): BigInt {
    let value = this.get("ETH");
    return value!.toBigInt();
  }

  set ETH(value: BigInt) {
    this.set("ETH", Value.fromBigInt(value));
  }

  get needsIncremented(): boolean {
    let value = this.get("needsIncremented");
    return value!.toBoolean();
  }

  set needsIncremented(value: boolean) {
    this.set("needsIncremented", Value.fromBoolean(value));
  }

  get splitRecipients(): Array<string> {
    let value = this.get("splitRecipients");
    return value!.toStringArray();
  }

  set splitRecipients(value: Array<string>) {
    this.set("splitRecipients", Value.fromStringArray(value));
  }

  get creations(): Array<string> {
    let value = this.get("creations");
    return value!.toStringArray();
  }

  set creations(value: Array<string>) {
    this.set("creations", Value.fromStringArray(value));
  }

  get editions(): Array<string> {
    let value = this.get("editions");
    return value!.toStringArray();
  }

  set editions(value: Array<string>) {
    this.set("editions", Value.fromStringArray(value));
  }

  get ERC20Transfers(): Array<string> {
    let value = this.get("ERC20Transfers");
    return value!.toStringArray();
  }

  set ERC20Transfers(value: Array<string>) {
    this.set("ERC20Transfers", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ethClaimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethClaimed(): BigInt {
    let value = this.get("ethClaimed");
    return value!.toBigInt();
  }

  set ethClaimed(value: BigInt) {
    this.set("ethClaimed", Value.fromBigInt(value));
  }

  get ownedProxies(): Array<string> {
    let value = this.get("ownedProxies");
    return value!.toStringArray();
  }

  set ownedProxies(value: Array<string>) {
    this.set("ownedProxies", Value.fromStringArray(value));
  }

  get createdProxies(): Array<string> {
    let value = this.get("createdProxies");
    return value!.toStringArray();
  }

  set createdProxies(value: Array<string>) {
    this.set("createdProxies", Value.fromStringArray(value));
  }

  get recipientInfo(): Array<string> {
    let value = this.get("recipientInfo");
    return value!.toStringArray();
  }

  set recipientInfo(value: Array<string>) {
    this.set("recipientInfo", Value.fromStringArray(value));
  }
}

export class SplitRecipient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("splitProxy", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("role", Value.fromString(""));
    this.set("shares", Value.fromString(""));
    this.set("allocation", Value.fromString(""));
    this.set("claimableETH", Value.fromBigInt(BigInt.zero()));
    this.set("ethClaimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitRecipient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SplitRecipient entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SplitRecipient", id.toString(), this);
    }
  }

  static load(id: string): SplitRecipient | null {
    return changetype<SplitRecipient | null>(store.get("SplitRecipient", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get splitProxy(): string {
    let value = this.get("splitProxy");
    return value!.toString();
  }

  set splitProxy(value: string) {
    this.set("splitProxy", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get role(): string {
    let value = this.get("role");
    return value!.toString();
  }

  set role(value: string) {
    this.set("role", Value.fromString(value));
  }

  get shares(): string {
    let value = this.get("shares");
    return value!.toString();
  }

  set shares(value: string) {
    this.set("shares", Value.fromString(value));
  }

  get allocation(): string {
    let value = this.get("allocation");
    return value!.toString();
  }

  set allocation(value: string) {
    this.set("allocation", Value.fromString(value));
  }

  get claimableETH(): BigInt {
    let value = this.get("claimableETH");
    return value!.toBigInt();
  }

  set claimableETH(value: BigInt) {
    this.set("claimableETH", Value.fromBigInt(value));
  }

  get ethClaimed(): BigInt {
    let value = this.get("ethClaimed");
    return value!.toBigInt();
  }

  set ethClaimed(value: BigInt) {
    this.set("ethClaimed", Value.fromBigInt(value));
  }
}
