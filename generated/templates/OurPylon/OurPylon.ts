// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedOwner extends ethereum.Event {
  get params(): AddedOwner__Params {
    return new AddedOwner__Params(this);
  }
}

export class AddedOwner__Params {
  _event: AddedOwner;

  constructor(event: AddedOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC777Received extends ethereum.Event {
  get params(): ERC777Received__Params {
    return new ERC777Received__Params(this);
  }
}

export class ERC777Received__Params {
  _event: ERC777Received;

  constructor(event: ERC777Received) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ETHReceived extends ethereum.Event {
  get params(): ETHReceived__Params {
    return new ETHReceived__Params(this);
  }
}

export class ETHReceived__Params {
  _event: ETHReceived;

  constructor(event: ETHReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EditionCreated extends ethereum.Event {
  get params(): EditionCreated__Params {
    return new EditionCreated__Params(this);
  }
}

export class EditionCreated__Params {
  _event: EditionCreated;

  constructor(event: EditionCreated) {
    this._event = event;
  }

  get editionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get animationUrl(): string {
    return this._event.parameters[4].value.toString();
  }

  get imageUrl(): string {
    return this._event.parameters[5].value.toString();
  }

  get editionSize(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get royaltyBPS(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class NameChanged extends ethereum.Event {
  get params(): NameChanged__Params {
    return new NameChanged__Params(this);
  }
}

export class NameChanged__Params {
  _event: NameChanged;

  constructor(event: NameChanged) {
    this._event = event;
  }

  get newName(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RemovedOwner extends ethereum.Event {
  get params(): RemovedOwner__Params {
    return new RemovedOwner__Params(this);
  }
}

export class RemovedOwner__Params {
  _event: RemovedOwner;

  constructor(event: RemovedOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SplitSetup extends ethereum.Event {
  get params(): SplitSetup__Params {
    return new SplitSetup__Params(this);
  }
}

export class SplitSetup__Params {
  _event: SplitSetup;

  constructor(event: SplitSetup) {
    this._event = event;
  }

  get owners(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class TransferERC20 extends ethereum.Event {
  get params(): TransferERC20__Params {
    return new TransferERC20__Params(this);
  }
}

export class TransferERC20__Params {
  _event: TransferERC20;

  constructor(event: TransferERC20) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferETH extends ethereum.Event {
  get params(): TransferETH__Params {
    return new TransferETH__Params(this);
  }
}

export class TransferETH__Params {
  _event: TransferETH;

  constructor(event: TransferETH) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class WindowIncremented extends ethereum.Event {
  get params(): WindowIncremented__Params {
    return new WindowIncremented__Params(this);
  }
}

export class WindowIncremented__Params {
  _event: WindowIncremented;

  constructor(event: WindowIncremented) {
    this._event = event;
  }

  get currentWindow(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fundsAvailable(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ZNFTMinted extends ethereum.Event {
  get params(): ZNFTMinted__Params {
    return new ZNFTMinted__Params(this);
  }
}

export class ZNFTMinted__Params {
  _event: ZNFTMinted;

  constructor(event: ZNFTMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OurPylon extends ethereum.SmartContract {
  static bind(address: Address): OurPylon {
    return new OurPylon("OurPylon", address);
  }

  MIRROR_CROWDFUND(): Address {
    let result = super.call(
      "MIRROR_CROWDFUND",
      "MIRROR_CROWDFUND():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_MIRROR_CROWDFUND(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MIRROR_CROWDFUND",
      "MIRROR_CROWDFUND():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERCENTAGE_SCALE(): BigInt {
    let result = super.call(
      "PERCENTAGE_SCALE",
      "PERCENTAGE_SCALE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENTAGE_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENTAGE_SCALE",
      "PERCENTAGE_SCALE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ZORA_AH(): Address {
    let result = super.call("ZORA_AH", "ZORA_AH():(address)", []);

    return result[0].toAddress();
  }

  try_ZORA_AH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ZORA_AH", "ZORA_AH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ZORA_EDITIONS(): Address {
    let result = super.call("ZORA_EDITIONS", "ZORA_EDITIONS():(address)", []);

    return result[0].toAddress();
  }

  try_ZORA_EDITIONS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ZORA_EDITIONS",
      "ZORA_EDITIONS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ZORA_MARKET(): Address {
    let result = super.call("ZORA_MARKET", "ZORA_MARKET():(address)", []);

    return result[0].toAddress();
  }

  try_ZORA_MARKET(): ethereum.CallResult<Address> {
    let result = super.tryCall("ZORA_MARKET", "ZORA_MARKET():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ZORA_MEDIA(): Address {
    let result = super.call("ZORA_MEDIA", "ZORA_MEDIA():(address)", []);

    return result[0].toAddress();
  }

  try_ZORA_MEDIA(): ethereum.CallResult<Address> {
    let result = super.tryCall("ZORA_MEDIA", "ZORA_MEDIA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceForWindow(param0: BigInt): BigInt {
    let result = super.call(
      "balanceForWindow",
      "balanceForWindow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_balanceForWindow(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceForWindow",
      "balanceForWindow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentWindow(): BigInt {
    let result = super.call("currentWindow", "currentWindow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentWindow",
      "currentWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwners(): Array<Address> {
    let result = super.call("getOwners", "getOwners():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getOwners(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getOwners", "getOwners():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isClaimed(window: BigInt, account: Address): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(window),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(
    window: BigInt,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(window),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(owner: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  scaleAmountByPercentage(amount: BigInt, scaledPercent: BigInt): BigInt {
    let result = super.call(
      "scaleAmountByPercentage",
      "scaleAmountByPercentage(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(scaledPercent)
      ]
    );

    return result[0].toBigInt();
  }

  try_scaleAmountByPercentage(
    amount: BigInt,
    scaledPercent: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scaleAmountByPercentage",
      "scaleAmountByPercentage(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(scaledPercent)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  untrustedExecuteTransaction(to: Address, data: Bytes): boolean {
    let result = super.call(
      "untrustedExecuteTransaction",
      "untrustedExecuteTransaction(address,bytes):(bool)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromBytes(data)]
    );

    return result[0].toBoolean();
  }

  try_untrustedExecuteTransaction(
    to: Address,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "untrustedExecuteTransaction",
      "untrustedExecuteTransaction(address,bytes):(bool)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptZMarketBidCall extends ethereum.Call {
  get inputs(): AcceptZMarketBidCall__Inputs {
    return new AcceptZMarketBidCall__Inputs(this);
  }

  get outputs(): AcceptZMarketBidCall__Outputs {
    return new AcceptZMarketBidCall__Outputs(this);
  }
}

export class AcceptZMarketBidCall__Inputs {
  _call: AcceptZMarketBidCall;

  constructor(call: AcceptZMarketBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expectedBid(): AcceptZMarketBidCallExpectedBidStruct {
    return changetype<AcceptZMarketBidCallExpectedBidStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AcceptZMarketBidCall__Outputs {
  _call: AcceptZMarketBidCall;

  constructor(call: AcceptZMarketBidCall) {
    this._call = call;
  }
}

export class AcceptZMarketBidCallExpectedBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnShare(): AcceptZMarketBidCallExpectedBidSellOnShareStruct {
    return changetype<AcceptZMarketBidCallExpectedBidSellOnShareStruct>(
      this[4].toTuple()
    );
  }
}

export class AcceptZMarketBidCallExpectedBidSellOnShareStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class AddOwnerCall extends ethereum.Call {
  get inputs(): AddOwnerCall__Inputs {
    return new AddOwnerCall__Inputs(this);
  }

  get outputs(): AddOwnerCall__Outputs {
    return new AddOwnerCall__Outputs(this);
  }
}

export class AddOwnerCall__Inputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOwnerCall__Outputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }
}

export class CancelZAuctionCall extends ethereum.Call {
  get inputs(): CancelZAuctionCall__Inputs {
    return new CancelZAuctionCall__Inputs(this);
  }

  get outputs(): CancelZAuctionCall__Outputs {
    return new CancelZAuctionCall__Outputs(this);
  }
}

export class CancelZAuctionCall__Inputs {
  _call: CancelZAuctionCall;

  constructor(call: CancelZAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelZAuctionCall__Outputs {
  _call: CancelZAuctionCall;

  constructor(call: CancelZAuctionCall) {
    this._call = call;
  }
}

export class ClaimERC20ForAllCall extends ethereum.Call {
  get inputs(): ClaimERC20ForAllCall__Inputs {
    return new ClaimERC20ForAllCall__Inputs(this);
  }

  get outputs(): ClaimERC20ForAllCall__Outputs {
    return new ClaimERC20ForAllCall__Outputs(this);
  }
}

export class ClaimERC20ForAllCall__Inputs {
  _call: ClaimERC20ForAllCall;

  constructor(call: ClaimERC20ForAllCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get allocations(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get merkleProofs(): Array<ClaimERC20ForAllCallMerkleProofsStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      ClaimERC20ForAllCallMerkleProofsStruct
    >();
  }
}

export class ClaimERC20ForAllCall__Outputs {
  _call: ClaimERC20ForAllCall;

  constructor(call: ClaimERC20ForAllCall) {
    this._call = call;
  }
}

export class ClaimERC20ForAllCallMerkleProofsStruct extends ethereum.Tuple {
  get merkleProof(): Array<Bytes> {
    return this[0].toBytesArray();
  }
}

export class ClaimETHCall extends ethereum.Call {
  get inputs(): ClaimETHCall__Inputs {
    return new ClaimETHCall__Inputs(this);
  }

  get outputs(): ClaimETHCall__Outputs {
    return new ClaimETHCall__Outputs(this);
  }
}

export class ClaimETHCall__Inputs {
  _call: ClaimETHCall;

  constructor(call: ClaimETHCall) {
    this._call = call;
  }

  get window(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get scaledPercentageAllocation(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class ClaimETHCall__Outputs {
  _call: ClaimETHCall;

  constructor(call: ClaimETHCall) {
    this._call = call;
  }
}

export class ClaimETHForAllWindowsCall extends ethereum.Call {
  get inputs(): ClaimETHForAllWindowsCall__Inputs {
    return new ClaimETHForAllWindowsCall__Inputs(this);
  }

  get outputs(): ClaimETHForAllWindowsCall__Outputs {
    return new ClaimETHForAllWindowsCall__Outputs(this);
  }
}

export class ClaimETHForAllWindowsCall__Inputs {
  _call: ClaimETHForAllWindowsCall;

  constructor(call: ClaimETHForAllWindowsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percentageAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimETHForAllWindowsCall__Outputs {
  _call: ClaimETHForAllWindowsCall;

  constructor(call: ClaimETHForAllWindowsCall) {
    this._call = call;
  }
}

export class CreateZoraAuctionCall extends ethereum.Call {
  get inputs(): CreateZoraAuctionCall__Inputs {
    return new CreateZoraAuctionCall__Inputs(this);
  }

  get outputs(): CreateZoraAuctionCall__Outputs {
    return new CreateZoraAuctionCall__Outputs(this);
  }
}

export class CreateZoraAuctionCall__Inputs {
  _call: CreateZoraAuctionCall;

  constructor(call: CreateZoraAuctionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get curator(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get curatorFeePercentage(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get auctionCurrency(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class CreateZoraAuctionCall__Outputs {
  _call: CreateZoraAuctionCall;

  constructor(call: CreateZoraAuctionCall) {
    this._call = call;
  }
}

export class CreateZoraEditionCall extends ethereum.Call {
  get inputs(): CreateZoraEditionCall__Inputs {
    return new CreateZoraEditionCall__Inputs(this);
  }

  get outputs(): CreateZoraEditionCall__Outputs {
    return new CreateZoraEditionCall__Outputs(this);
  }
}

export class CreateZoraEditionCall__Inputs {
  _call: CreateZoraEditionCall;

  constructor(call: CreateZoraEditionCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get animationUrl(): string {
    return this._call.inputValues[3].value.toString();
  }

  get animationHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get imageUrl(): string {
    return this._call.inputValues[5].value.toString();
  }

  get imageHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get editionSize(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get royaltyBPS(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get publicMint(): boolean {
    return this._call.inputValues[10].value.toBoolean();
  }
}

export class CreateZoraEditionCall__Outputs {
  _call: CreateZoraEditionCall;

  constructor(call: CreateZoraEditionCall) {
    this._call = call;
  }
}

export class EditNicknameCall extends ethereum.Call {
  get inputs(): EditNicknameCall__Inputs {
    return new EditNicknameCall__Inputs(this);
  }

  get outputs(): EditNicknameCall__Outputs {
    return new EditNicknameCall__Outputs(this);
  }
}

export class EditNicknameCall__Inputs {
  _call: EditNicknameCall;

  constructor(call: EditNicknameCall) {
    this._call = call;
  }

  get newName_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class EditNicknameCall__Outputs {
  _call: EditNicknameCall;

  constructor(call: EditNicknameCall) {
    this._call = call;
  }
}

export class IncrementThenClaimAllCall extends ethereum.Call {
  get inputs(): IncrementThenClaimAllCall__Inputs {
    return new IncrementThenClaimAllCall__Inputs(this);
  }

  get outputs(): IncrementThenClaimAllCall__Outputs {
    return new IncrementThenClaimAllCall__Outputs(this);
  }
}

export class IncrementThenClaimAllCall__Inputs {
  _call: IncrementThenClaimAllCall;

  constructor(call: IncrementThenClaimAllCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percentageAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class IncrementThenClaimAllCall__Outputs {
  _call: IncrementThenClaimAllCall;

  constructor(call: IncrementThenClaimAllCall) {
    this._call = call;
  }
}

export class IncrementWindowCall extends ethereum.Call {
  get inputs(): IncrementWindowCall__Inputs {
    return new IncrementWindowCall__Inputs(this);
  }

  get outputs(): IncrementWindowCall__Outputs {
    return new IncrementWindowCall__Outputs(this);
  }
}

export class IncrementWindowCall__Inputs {
  _call: IncrementWindowCall;

  constructor(call: IncrementWindowCall) {
    this._call = call;
  }
}

export class IncrementWindowCall__Outputs {
  _call: IncrementWindowCall;

  constructor(call: IncrementWindowCall) {
    this._call = call;
  }
}

export class MintEditionsToCall extends ethereum.Call {
  get inputs(): MintEditionsToCall__Inputs {
    return new MintEditionsToCall__Inputs(this);
  }

  get outputs(): MintEditionsToCall__Outputs {
    return new MintEditionsToCall__Outputs(this);
  }
}

export class MintEditionsToCall__Inputs {
  _call: MintEditionsToCall;

  constructor(call: MintEditionsToCall) {
    this._call = call;
  }

  get editionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class MintEditionsToCall__Outputs {
  _call: MintEditionsToCall;

  constructor(call: MintEditionsToCall) {
    this._call = call;
  }
}

export class MintToAuctionForETHCall extends ethereum.Call {
  get inputs(): MintToAuctionForETHCall__Inputs {
    return new MintToAuctionForETHCall__Inputs(this);
  }

  get outputs(): MintToAuctionForETHCall__Outputs {
    return new MintToAuctionForETHCall__Outputs(this);
  }
}

export class MintToAuctionForETHCall__Inputs {
  _call: MintToAuctionForETHCall;

  constructor(call: MintToAuctionForETHCall) {
    this._call = call;
  }

  get mediaData(): MintToAuctionForETHCallMediaDataStruct {
    return changetype<MintToAuctionForETHCallMediaDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get bidShares(): MintToAuctionForETHCallBidSharesStruct {
    return changetype<MintToAuctionForETHCallBidSharesStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintToAuctionForETHCall__Outputs {
  _call: MintToAuctionForETHCall;

  constructor(call: MintToAuctionForETHCall) {
    this._call = call;
  }
}

export class MintToAuctionForETHCallMediaDataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class MintToAuctionForETHCallBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): MintToAuctionForETHCallBidSharesPrevOwnerStruct {
    return changetype<MintToAuctionForETHCallBidSharesPrevOwnerStruct>(
      this[0].toTuple()
    );
  }

  get creator(): MintToAuctionForETHCallBidSharesCreatorStruct {
    return changetype<MintToAuctionForETHCallBidSharesCreatorStruct>(
      this[1].toTuple()
    );
  }

  get owner(): MintToAuctionForETHCallBidSharesOwnerStruct {
    return changetype<MintToAuctionForETHCallBidSharesOwnerStruct>(
      this[2].toTuple()
    );
  }
}

export class MintToAuctionForETHCallBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class MintToAuctionForETHCallBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class MintToAuctionForETHCallBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class MintZNFTCall extends ethereum.Call {
  get inputs(): MintZNFTCall__Inputs {
    return new MintZNFTCall__Inputs(this);
  }

  get outputs(): MintZNFTCall__Outputs {
    return new MintZNFTCall__Outputs(this);
  }
}

export class MintZNFTCall__Inputs {
  _call: MintZNFTCall;

  constructor(call: MintZNFTCall) {
    this._call = call;
  }

  get mediaData(): MintZNFTCallMediaDataStruct {
    return changetype<MintZNFTCallMediaDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get bidShares(): MintZNFTCallBidSharesStruct {
    return changetype<MintZNFTCallBidSharesStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class MintZNFTCall__Outputs {
  _call: MintZNFTCall;

  constructor(call: MintZNFTCall) {
    this._call = call;
  }
}

export class MintZNFTCallMediaDataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class MintZNFTCallBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): MintZNFTCallBidSharesPrevOwnerStruct {
    return changetype<MintZNFTCallBidSharesPrevOwnerStruct>(this[0].toTuple());
  }

  get creator(): MintZNFTCallBidSharesCreatorStruct {
    return changetype<MintZNFTCallBidSharesCreatorStruct>(this[1].toTuple());
  }

  get owner(): MintZNFTCallBidSharesOwnerStruct {
    return changetype<MintZNFTCallBidSharesOwnerStruct>(this[2].toTuple());
  }
}

export class MintZNFTCallBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class MintZNFTCallBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class MintZNFTCallBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get prevOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class RemoveZMarketAskCall extends ethereum.Call {
  get inputs(): RemoveZMarketAskCall__Inputs {
    return new RemoveZMarketAskCall__Inputs(this);
  }

  get outputs(): RemoveZMarketAskCall__Outputs {
    return new RemoveZMarketAskCall__Outputs(this);
  }
}

export class RemoveZMarketAskCall__Inputs {
  _call: RemoveZMarketAskCall;

  constructor(call: RemoveZMarketAskCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveZMarketAskCall__Outputs {
  _call: RemoveZMarketAskCall;

  constructor(call: RemoveZMarketAskCall) {
    this._call = call;
  }
}

export class SetEditionMinterCall extends ethereum.Call {
  get inputs(): SetEditionMinterCall__Inputs {
    return new SetEditionMinterCall__Inputs(this);
  }

  get outputs(): SetEditionMinterCall__Outputs {
    return new SetEditionMinterCall__Outputs(this);
  }
}

export class SetEditionMinterCall__Inputs {
  _call: SetEditionMinterCall;

  constructor(call: SetEditionMinterCall) {
    this._call = call;
  }

  get editionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetEditionMinterCall__Outputs {
  _call: SetEditionMinterCall;

  constructor(call: SetEditionMinterCall) {
    this._call = call;
  }
}

export class SetEditionPriceCall extends ethereum.Call {
  get inputs(): SetEditionPriceCall__Inputs {
    return new SetEditionPriceCall__Inputs(this);
  }

  get outputs(): SetEditionPriceCall__Outputs {
    return new SetEditionPriceCall__Outputs(this);
  }
}

export class SetEditionPriceCall__Inputs {
  _call: SetEditionPriceCall;

  constructor(call: SetEditionPriceCall) {
    this._call = call;
  }

  get editionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEditionPriceCall__Outputs {
  _call: SetEditionPriceCall;

  constructor(call: SetEditionPriceCall) {
    this._call = call;
  }
}

export class SetZAuctionApprovalCall extends ethereum.Call {
  get inputs(): SetZAuctionApprovalCall__Inputs {
    return new SetZAuctionApprovalCall__Inputs(this);
  }

  get outputs(): SetZAuctionApprovalCall__Outputs {
    return new SetZAuctionApprovalCall__Outputs(this);
  }
}

export class SetZAuctionApprovalCall__Inputs {
  _call: SetZAuctionApprovalCall;

  constructor(call: SetZAuctionApprovalCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetZAuctionApprovalCall__Outputs {
  _call: SetZAuctionApprovalCall;

  constructor(call: SetZAuctionApprovalCall) {
    this._call = call;
  }
}

export class SetZAuctionReservePriceCall extends ethereum.Call {
  get inputs(): SetZAuctionReservePriceCall__Inputs {
    return new SetZAuctionReservePriceCall__Inputs(this);
  }

  get outputs(): SetZAuctionReservePriceCall__Outputs {
    return new SetZAuctionReservePriceCall__Outputs(this);
  }
}

export class SetZAuctionReservePriceCall__Inputs {
  _call: SetZAuctionReservePriceCall;

  constructor(call: SetZAuctionReservePriceCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetZAuctionReservePriceCall__Outputs {
  _call: SetZAuctionReservePriceCall;

  constructor(call: SetZAuctionReservePriceCall) {
    this._call = call;
  }
}

export class SetZMarketAskCall extends ethereum.Call {
  get inputs(): SetZMarketAskCall__Inputs {
    return new SetZMarketAskCall__Inputs(this);
  }

  get outputs(): SetZMarketAskCall__Outputs {
    return new SetZMarketAskCall__Outputs(this);
  }
}

export class SetZMarketAskCall__Inputs {
  _call: SetZMarketAskCall;

  constructor(call: SetZMarketAskCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ask(): SetZMarketAskCallAskStruct {
    return changetype<SetZMarketAskCallAskStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetZMarketAskCall__Outputs {
  _call: SetZMarketAskCall;

  constructor(call: SetZMarketAskCall) {
    this._call = call;
  }
}

export class SetZMarketAskCallAskStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }
}

export class SetZMarketBidSharesCall extends ethereum.Call {
  get inputs(): SetZMarketBidSharesCall__Inputs {
    return new SetZMarketBidSharesCall__Inputs(this);
  }

  get outputs(): SetZMarketBidSharesCall__Outputs {
    return new SetZMarketBidSharesCall__Outputs(this);
  }
}

export class SetZMarketBidSharesCall__Inputs {
  _call: SetZMarketBidSharesCall;

  constructor(call: SetZMarketBidSharesCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidShares(): SetZMarketBidSharesCallBidSharesStruct {
    return changetype<SetZMarketBidSharesCallBidSharesStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetZMarketBidSharesCall__Outputs {
  _call: SetZMarketBidSharesCall;

  constructor(call: SetZMarketBidSharesCall) {
    this._call = call;
  }
}

export class SetZMarketBidSharesCallBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): SetZMarketBidSharesCallBidSharesPrevOwnerStruct {
    return changetype<SetZMarketBidSharesCallBidSharesPrevOwnerStruct>(
      this[0].toTuple()
    );
  }

  get creator(): SetZMarketBidSharesCallBidSharesCreatorStruct {
    return changetype<SetZMarketBidSharesCallBidSharesCreatorStruct>(
      this[1].toTuple()
    );
  }

  get owner(): SetZMarketBidSharesCallBidSharesOwnerStruct {
    return changetype<SetZMarketBidSharesCallBidSharesOwnerStruct>(
      this[2].toTuple()
    );
  }
}

export class SetZMarketBidSharesCallBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class SetZMarketBidSharesCallBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class SetZMarketBidSharesCallBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get owners_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class SwapOwnerCall extends ethereum.Call {
  get inputs(): SwapOwnerCall__Inputs {
    return new SwapOwnerCall__Inputs(this);
  }

  get outputs(): SwapOwnerCall__Outputs {
    return new SwapOwnerCall__Outputs(this);
  }
}

export class SwapOwnerCall__Inputs {
  _call: SwapOwnerCall;

  constructor(call: SwapOwnerCall) {
    this._call = call;
  }

  get prevOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oldOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapOwnerCall__Outputs {
  _call: SwapOwnerCall;

  constructor(call: SwapOwnerCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class UntrustedBurnERC721Call extends ethereum.Call {
  get inputs(): UntrustedBurnERC721Call__Inputs {
    return new UntrustedBurnERC721Call__Inputs(this);
  }

  get outputs(): UntrustedBurnERC721Call__Outputs {
    return new UntrustedBurnERC721Call__Outputs(this);
  }
}

export class UntrustedBurnERC721Call__Inputs {
  _call: UntrustedBurnERC721Call;

  constructor(call: UntrustedBurnERC721Call) {
    this._call = call;
  }

  get tokenContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UntrustedBurnERC721Call__Outputs {
  _call: UntrustedBurnERC721Call;

  constructor(call: UntrustedBurnERC721Call) {
    this._call = call;
  }
}

export class UntrustedExecuteTransactionCall extends ethereum.Call {
  get inputs(): UntrustedExecuteTransactionCall__Inputs {
    return new UntrustedExecuteTransactionCall__Inputs(this);
  }

  get outputs(): UntrustedExecuteTransactionCall__Outputs {
    return new UntrustedExecuteTransactionCall__Outputs(this);
  }
}

export class UntrustedExecuteTransactionCall__Inputs {
  _call: UntrustedExecuteTransactionCall;

  constructor(call: UntrustedExecuteTransactionCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UntrustedExecuteTransactionCall__Outputs {
  _call: UntrustedExecuteTransactionCall;

  constructor(call: UntrustedExecuteTransactionCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UntrustedSafeTransferERC721Call extends ethereum.Call {
  get inputs(): UntrustedSafeTransferERC721Call__Inputs {
    return new UntrustedSafeTransferERC721Call__Inputs(this);
  }

  get outputs(): UntrustedSafeTransferERC721Call__Outputs {
    return new UntrustedSafeTransferERC721Call__Outputs(this);
  }
}

export class UntrustedSafeTransferERC721Call__Inputs {
  _call: UntrustedSafeTransferERC721Call;

  constructor(call: UntrustedSafeTransferERC721Call) {
    this._call = call;
  }

  get tokenContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOwner_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UntrustedSafeTransferERC721Call__Outputs {
  _call: UntrustedSafeTransferERC721Call;

  constructor(call: UntrustedSafeTransferERC721Call) {
    this._call = call;
  }
}

export class UntrustedSetApprovalERC721Call extends ethereum.Call {
  get inputs(): UntrustedSetApprovalERC721Call__Inputs {
    return new UntrustedSetApprovalERC721Call__Inputs(this);
  }

  get outputs(): UntrustedSetApprovalERC721Call__Outputs {
    return new UntrustedSetApprovalERC721Call__Outputs(this);
  }
}

export class UntrustedSetApprovalERC721Call__Inputs {
  _call: UntrustedSetApprovalERC721Call;

  constructor(call: UntrustedSetApprovalERC721Call) {
    this._call = call;
  }

  get tokenContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get operator_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UntrustedSetApprovalERC721Call__Outputs {
  _call: UntrustedSetApprovalERC721Call;

  constructor(call: UntrustedSetApprovalERC721Call) {
    this._call = call;
  }
}

export class UpdateEditionURLsCall extends ethereum.Call {
  get inputs(): UpdateEditionURLsCall__Inputs {
    return new UpdateEditionURLsCall__Inputs(this);
  }

  get outputs(): UpdateEditionURLsCall__Outputs {
    return new UpdateEditionURLsCall__Outputs(this);
  }
}

export class UpdateEditionURLsCall__Inputs {
  _call: UpdateEditionURLsCall;

  constructor(call: UpdateEditionURLsCall) {
    this._call = call;
  }

  get editionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get imageUrl(): string {
    return this._call.inputValues[1].value.toString();
  }

  get animationUrl(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateEditionURLsCall__Outputs {
  _call: UpdateEditionURLsCall;

  constructor(call: UpdateEditionURLsCall) {
    this._call = call;
  }
}

export class UpdateZNFTMetadataURICall extends ethereum.Call {
  get inputs(): UpdateZNFTMetadataURICall__Inputs {
    return new UpdateZNFTMetadataURICall__Inputs(this);
  }

  get outputs(): UpdateZNFTMetadataURICall__Outputs {
    return new UpdateZNFTMetadataURICall__Outputs(this);
  }
}

export class UpdateZNFTMetadataURICall__Inputs {
  _call: UpdateZNFTMetadataURICall;

  constructor(call: UpdateZNFTMetadataURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadataURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateZNFTMetadataURICall__Outputs {
  _call: UpdateZNFTMetadataURICall;

  constructor(call: UpdateZNFTMetadataURICall) {
    this._call = call;
  }
}

export class UpdateZNFTTokenURICall extends ethereum.Call {
  get inputs(): UpdateZNFTTokenURICall__Inputs {
    return new UpdateZNFTTokenURICall__Inputs(this);
  }

  get outputs(): UpdateZNFTTokenURICall__Outputs {
    return new UpdateZNFTTokenURICall__Outputs(this);
  }
}

export class UpdateZNFTTokenURICall__Inputs {
  _call: UpdateZNFTTokenURICall;

  constructor(call: UpdateZNFTTokenURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateZNFTTokenURICall__Outputs {
  _call: UpdateZNFTTokenURICall;

  constructor(call: UpdateZNFTTokenURICall) {
    this._call = call;
  }
}

export class UpdateZNFTURIsCall extends ethereum.Call {
  get inputs(): UpdateZNFTURIsCall__Inputs {
    return new UpdateZNFTURIsCall__Inputs(this);
  }

  get outputs(): UpdateZNFTURIsCall__Outputs {
    return new UpdateZNFTURIsCall__Outputs(this);
  }
}

export class UpdateZNFTURIsCall__Inputs {
  _call: UpdateZNFTURIsCall;

  constructor(call: UpdateZNFTURIsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get metadataURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateZNFTURIsCall__Outputs {
  _call: UpdateZNFTURIsCall;

  constructor(call: UpdateZNFTURIsCall) {
    this._call = call;
  }
}

export class WithdrawEditionFundsCall extends ethereum.Call {
  get inputs(): WithdrawEditionFundsCall__Inputs {
    return new WithdrawEditionFundsCall__Inputs(this);
  }

  get outputs(): WithdrawEditionFundsCall__Outputs {
    return new WithdrawEditionFundsCall__Outputs(this);
  }
}

export class WithdrawEditionFundsCall__Inputs {
  _call: WithdrawEditionFundsCall;

  constructor(call: WithdrawEditionFundsCall) {
    this._call = call;
  }

  get editionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawEditionFundsCall__Outputs {
  _call: WithdrawEditionFundsCall;

  constructor(call: WithdrawEditionFundsCall) {
    this._call = call;
  }
}
