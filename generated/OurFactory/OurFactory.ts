// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SplitCreated extends ethereum.Event {
  get params(): SplitCreated__Params {
    return new SplitCreated__Params(this);
  }
}

export class SplitCreated__Params {
  _event: SplitCreated;

  constructor(event: SplitCreated) {
    this._event = event;
  }

  get ourProxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxyCreator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get splitRecipients(): string {
    return this._event.parameters[2].value.toString();
  }

  get nickname(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OurFactory extends ethereum.SmartContract {
  static bind(address: Address): OurFactory {
    return new OurFactory("OurFactory", address);
  }

  createSplit(
    merkleRoot_: Bytes,
    data: Bytes,
    splitRecipients_: string,
    nickname_: string
  ): Address {
    let result = super.call(
      "createSplit",
      "createSplit(bytes32,bytes,string,string):(address)",
      [
        ethereum.Value.fromFixedBytes(merkleRoot_),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromString(splitRecipients_),
        ethereum.Value.fromString(nickname_)
      ]
    );

    return result[0].toAddress();
  }

  try_createSplit(
    merkleRoot_: Bytes,
    data: Bytes,
    splitRecipients_: string,
    nickname_: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSplit",
      "createSplit(bytes32,bytes,string,string):(address)",
      [
        ethereum.Value.fromFixedBytes(merkleRoot_),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromString(splitRecipients_),
        ethereum.Value.fromString(nickname_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pylon(): Address {
    let result = super.call("pylon", "pylon():(address)", []);

    return result[0].toAddress();
  }

  try_pylon(): ethereum.CallResult<Address> {
    let result = super.tryCall("pylon", "pylon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get pylon_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSplitCall extends ethereum.Call {
  get inputs(): CreateSplitCall__Inputs {
    return new CreateSplitCall__Inputs(this);
  }

  get outputs(): CreateSplitCall__Outputs {
    return new CreateSplitCall__Outputs(this);
  }
}

export class CreateSplitCall__Inputs {
  _call: CreateSplitCall;

  constructor(call: CreateSplitCall) {
    this._call = call;
  }

  get merkleRoot_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get splitRecipients_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get nickname_(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateSplitCall__Outputs {
  _call: CreateSplitCall;

  constructor(call: CreateSplitCall) {
    this._call = call;
  }

  get ourProxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
